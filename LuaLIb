-- safe Instance.new wrapper for sUNC / loadstring
local function safeInstance(className, parent)
    local obj
    task.synchronize() -- forces execution in UI-capable thread
    obj = Instance.new(className)
    if parent then 
        obj.Parent = parent 
    end
    return obj
end

local drawingUI = nil
task.spawn(function()
    repeat task.wait() until game and game:GetService("CoreGui")
    
    drawingUI = safeInstance("ScreenGui", game:GetService("CoreGui"))
    drawingUI.Name = "Drawing"
    drawingUI.IgnoreGuiInset = true
    drawingUI.DisplayOrder = 0x7fffffff
end)

-- Wait for drawingUI to be created
while not drawingUI do
    task.wait()
end

local drawingIndex = 0

local baseDrawingObj = {
    Visible = true,
    ZIndex = 0,
    Transparency = 1,
    Color = Color3.new(),
    Remove = function(self)
        -- Clean up the object
        if self._guiObject then
            self._guiObject:Destroy()
        end
    end,
    Destroy = function(self)
        self:Remove()
    end
}

local drawingFontsEnum = {
    [0] = Font.fromEnum(Enum.Font.Roboto),
    [1] = Font.fromEnum(Enum.Font.Legacy),
    [2] = Font.fromEnum(Enum.Font.SourceSans),
    [3] = Font.fromEnum(Enum.Font.RobotoMono),
}

local function convertTransparency(transparency: number): number
    return math.clamp(1 - transparency, 0, 1)
end

local DrawingLib = {}
DrawingLib.Fonts = {
    ["UI"] = 0,
    ["System"] = 1,
    ["Plex"] = 2,
    ["Monospace"] = 3
}

function DrawingLib.new(drawingType)
    drawingIndex += 1
    
    if drawingType == "Line" then
        local lineObj = {
            From = Vector2.zero,
            To = Vector2.zero,
            Thickness = 1,
            Visible = true,
            ZIndex = 0,
            Transparency = 1,
            Color = Color3.new()
        }
        
        local lineFrame = safeInstance("Frame", drawingUI)
        lineFrame.Name = "DrawingLine_" .. drawingIndex
        lineFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        lineFrame.BorderSizePixel = 0
        lineFrame.BackgroundColor3 = lineObj.Color
        lineFrame.Visible = lineObj.Visible
        lineFrame.ZIndex = lineObj.ZIndex
        lineFrame.BackgroundTransparency = convertTransparency(lineObj.Transparency)
        lineFrame.Size = UDim2.new()
        
        -- Store reference to GUI object
        lineObj._guiObject = lineFrame
        
        -- Update line position and size
        local function updateLine()
            local direction = (lineObj.To - lineObj.From)
            local center = (lineObj.To + lineObj.From) / 2
            local distance = direction.Magnitude
            local theta = math.deg(math.atan2(direction.Y, direction.X))
            
            lineFrame.Position = UDim2.fromOffset(center.X, center.Y)
            lineFrame.Rotation = theta
            lineFrame.Size = UDim2.fromOffset(distance, lineObj.Thickness)
        end
        
        updateLine()
        
        local lineMeta = {}
        lineMeta.__index = function(self, index)
            if index == "Remove" or index == "Destroy" then
                return function()
                    if lineFrame then
                        lineFrame:Destroy()
                    end
                    setmetatable(self, nil)
                end
            end
            return lineObj[index]
        end
        
        lineMeta.__newindex = function(self, index, value)
            if lineObj[index] == nil then return end
            
            lineObj[index] = value
            
            if index == "From" or index == "To" or index == "Thickness" then
                updateLine()
            elseif index == "Visible" then
                lineFrame.Visible = value
            elseif index == "ZIndex" then
                lineFrame.ZIndex = value
            elseif index == "Transparency" then
                lineFrame.BackgroundTransparency = convertTransparency(value)
            elseif index == "Color" then
                lineFrame.BackgroundColor3 = value
            end
        end
        
        lineMeta.__tostring = function() return "Drawing" end
        
        return setmetatable({__type = "Drawing Object"}, lineMeta)
        
    elseif drawingType == "Text" then
        local textObj = {
            Text = "",
            Font = DrawingLib.Fonts.UI,
            Size = 0,
            Position = Vector2.zero,
            Center = false,
            Outline = false,
            OutlineColor = Color3.new(),
            Visible = true,
            ZIndex = 0,
            Transparency = 1,
            Color = Color3.new()
        }
        
        local textLabel = safeInstance("TextLabel")
        local uiStroke = safeInstance("UIStroke", textLabel)
        textLabel.Name = "DrawingText_" .. drawingIndex
        textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
        textLabel.BorderSizePixel = 0
        textLabel.BackgroundTransparency = 1
        
        textLabel.Visible = textObj.Visible
        textLabel.TextColor3 = textObj.Color
        textLabel.TextTransparency = convertTransparency(textObj.Transparency)
        textLabel.ZIndex = textObj.ZIndex
        textLabel.FontFace = drawingFontsEnum[textObj.Font]
        textLabel.TextSize = textObj.Size
        
        textLabel:GetPropertyChangedSignal("TextBounds"):Connect(function()
            local textBounds = textLabel.TextBounds
            local offset = textBounds / 2
            textLabel.Size = UDim2.fromOffset(textBounds.X, textBounds.Y)
            textLabel.Position = UDim2.fromOffset(
                textObj.Position.X + (if not textObj.Center then offset.X else 0), 
                textObj.Position.Y + offset.Y
            )
        end)
        
        uiStroke.Thickness = 1
        uiStroke.Enabled = textObj.Outline
        uiStroke.Color = textObj.OutlineColor
        
        textLabel.Parent = drawingUI
        
        -- Store reference to GUI object
        textObj._guiObject = textLabel
        
        local textMeta = {}
        textMeta.__index = function(self, index)
            if index == "Remove" or index == "Destroy" then
                return function()
                    if textLabel then
                        textLabel:Destroy()
                    end
                    setmetatable(self, nil)
                end
            elseif index == "TextBounds" then
                return textLabel.TextBounds
            end
            return textObj[index]
        end
        
        textMeta.__newindex = function(self, index, value)
            if textObj[index] == nil then return end
            
            textObj[index] = value
            
            if index == "Text" then
                textLabel.Text = value
            elseif index == "Font" then
                value = math.clamp(value, 0, 3)
                textLabel.FontFace = drawingFontsEnum[value]
            elseif index == "Size" then
                textLabel.TextSize = value
            elseif index == "Position" then
                local offset = textLabel.TextBounds / 2
                textLabel.Position = UDim2.fromOffset(
                    value.X + (if not textObj.Center then offset.X else 0), 
                    value.Y + offset.Y
                )
            elseif index == "Center" then
                if value then
                    local viewportSize = workspace.CurrentCamera.ViewportSize
                    textLabel.Position = UDim2.fromOffset(viewportSize.X / 2, viewportSize.Y / 2)
                else
                    local offset = textLabel.TextBounds / 2
                    textLabel.Position = UDim2.fromOffset(
                        textObj.Position.X + offset.X, 
                        textObj.Position.Y + offset.Y
                    )
                end
            elseif index == "Outline" then
                uiStroke.Enabled = value
            elseif index == "OutlineColor" then
                uiStroke.Color = value
            elseif index == "Visible" then
                textLabel.Visible = value
            elseif index == "ZIndex" then
                textLabel.ZIndex = value
            elseif index == "Transparency" then
                local transparency = convertTransparency(value)
                textLabel.TextTransparency = transparency
                uiStroke.Transparency = transparency
            elseif index == "Color" then
                textLabel.TextColor3 = value
            end
        end
        
        textMeta.__tostring = function() return "Drawing" end
        
        return setmetatable({__type = "Drawing Object"}, textMeta)
    
    elseif drawingType == "Square" or drawingType == "Quad" then
        -- Square and Quad are essentially the same - a rectangle
        local squareObj = {
            Position = Vector2.zero,
            Size = Vector2.zero,
            Filled = true,
            Thickness = 1,
            Visible = true,
            ZIndex = 0,
            Transparency = 1,
            Color = Color3.new()
        }
        
        local squareFrame = safeInstance("Frame", drawingUI)
        squareFrame.Name = "DrawingSquare_" .. drawingIndex
        squareFrame.AnchorPoint = Vector2.new(0, 0)
        squareFrame.BorderSizePixel = 0
        squareFrame.BackgroundColor3 = squareObj.Color
        squareFrame.Visible = squareObj.Visible
        squareFrame.ZIndex = squareObj.ZIndex
        squareFrame.BackgroundTransparency = squareObj.Filled and convertTransparency(squareObj.Transparency) or 1
        
        local uiStroke = safeInstance("UIStroke", squareFrame)
        uiStroke.Thickness = squareObj.Thickness
        uiStroke.Color = squareObj.Color
        uiStroke.Transparency = convertTransparency(squareObj.Transparency)
        uiStroke.Enabled = not squareObj.Filled
        
        -- Update square position and size
        local function updateSquare()
            squareFrame.Position = UDim2.fromOffset(squareObj.Position.X, squareObj.Position.Y)
            squareFrame.Size = UDim2.fromOffset(squareObj.Size.X, squareObj.Size.Y)
        end
        
        updateSquare()
        
        -- Store reference to GUI object
        squareObj._guiObject = squareFrame
        
        local squareMeta = {}
        squareMeta.__index = function(self, index)
            if index == "Remove" or index == "Destroy" then
                return function()
                    if squareFrame then
                        squareFrame:Destroy()
                    end
                    setmetatable(self, nil)
                end
            end
            return squareObj[index]
        end
        
        squareMeta.__newindex = function(self, index, value)
            if squareObj[index] == nil then return end
            
            squareObj[index] = value
            
            if index == "Position" or index == "Size" then
                updateSquare()
            elseif index == "Filled" then
                squareFrame.BackgroundTransparency = value and convertTransparency(squareObj.Transparency) or 1
                uiStroke.Enabled = not value
            elseif index == "Thickness" then
                uiStroke.Thickness = value
            elseif index == "Visible" then
                squareFrame.Visible = value
            elseif index == "ZIndex" then
                squareFrame.ZIndex = value
            elseif index == "Transparency" then
                squareFrame.BackgroundTransparency = squareObj.Filled and convertTransparency(value) or 1
                uiStroke.Transparency = convertTransparency(value)
            elseif index == "Color" then
                squareFrame.BackgroundColor3 = value
                uiStroke.Color = value
            end
        end
        
        squareMeta.__tostring = function() return "Drawing" end
        
        return setmetatable({__type = "Drawing Object"}, squareMeta)
    
    elseif drawingType == "Image" then
        local imageObj = {
            Position = Vector2.zero,
            Size = Vector2.zero,
            Data = "",
            Transparency = 1,
            Visible = true,
            ZIndex = 0
        }
        
        local imageLabel = safeInstance("ImageLabel", drawingUI)
        imageLabel.Name = "DrawingImage_" .. drawingIndex
        imageLabel.AnchorPoint = Vector2.new(0, 0)
        imageLabel.BorderSizePixel = 0
        imageLabel.BackgroundTransparency = 1
        imageLabel.Visible = imageObj.Visible
        imageLabel.ZIndex = imageObj.ZIndex
        imageLabel.ImageTransparency = convertTransparency(imageObj.Transparency)
        
        -- Update image position and size
        local function updateImage()
            imageLabel.Position = UDim2.fromOffset(imageObj.Position.X, imageObj.Position.Y)
            imageLabel.Size = UDim2.fromOffset(imageObj.Size.X, imageObj.Size.Y)
        end
        
        updateImage()
        
        -- Store reference to GUI object
        imageObj._guiObject = imageLabel
        
        local imageMeta = {}
        imageMeta.__index = function(self, index)
            if index == "Remove" or index == "Destroy" then
                return function()
                    if imageLabel then
                        imageLabel:Destroy()
                    end
                    setmetatable(self, nil)
                end
            end
            return imageObj[index]
        end
        
        imageMeta.__newindex = function(self, index, value)
            if imageObj[index] == nil then return end
            
            imageObj[index] = value
            
            if index == "Position" or index == "Size" then
                updateImage()
            elseif index == "Data" then
                -- Try to load the image data
                local success = pcall(function()
                    imageLabel.Image = value
                end)
                if not success then
                    warn("Failed to load image data: " .. tostring(value))
                end
            elseif index == "Transparency" then
                imageLabel.ImageTransparency = convertTransparency(value)
            elseif index == "Visible" then
                imageLabel.Visible = value
            elseif index == "ZIndex" then
                imageLabel.ZIndex = value
            end
        end
        
        imageMeta.__tostring = function() return "Drawing" end
        
        return setmetatable({__type = "Drawing Object"}, imageMeta)
    
    else
        error("Unsupported drawing type: " .. tostring(drawingType), 2)
    end
end

getgenv().Drawing = DrawingLib

getgenv().isrenderobj = function(obj)
    if type(obj) ~= "table" then return false end
    local success, result = pcall(function()
        return obj.__type == "Drawing Object"
    end)
    return success and result
end

getgenv().cleardrawcache = function()
    if drawingUI then 
        drawingUI:ClearAllChildren() 
    end
end

getgenv().getrenderproperty = function(obj, prop)
    if not getgenv().isrenderobj(obj) then
        error("Object must be a Drawing", 2)
    end
    return obj[prop]
end

getgenv().setrenderproperty = function(obj, prop, val)
    if not getgenv().isrenderobj(obj) then
        error("Object must be a Drawing", 2)
    end
    obj[prop] = val
end
